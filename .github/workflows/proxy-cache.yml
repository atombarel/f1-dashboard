name: CI/CD Proxy Cache

on:
  push:
    branches: [ main ]
    paths:
      - 'cloudflare-worker/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'cloudflare-worker/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cloudflare-worker
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: ./cloudflare-worker/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check and run migrations
      run: |
        echo "Checking migration status..."
        
        # Check what migrations need to be applied
        MIGRATION_OUTPUT=$(npx wrangler d1 migrations list f1-api-cache-db --env production --remote 2>&1)
        echo "Migration status: $MIGRATION_OUTPUT"
        
        if echo "$MIGRATION_OUTPUT" | grep -q "No migrations to apply"; then
          echo "‚úÖ No migrations needed - database is up to date"
        else
          echo "üìù Applying migrations..."
          if npx wrangler d1 migrations apply f1-api-cache-db --env production --remote; then
            echo "‚úÖ Migrations applied successfully"
          else
            echo "‚ùå Migration failed but continuing with deployment"
            echo "This might be expected if migrations were already applied"
          fi
        fi
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    
    - name: Deploy to Cloudflare Workers
      run: npx wrangler deploy --env production
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}